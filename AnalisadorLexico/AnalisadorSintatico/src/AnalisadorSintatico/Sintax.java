
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 10 13:19:39 BRT 2023
//----------------------------------------------------

package AnalisadorSintatico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 10 13:19:39 BRT 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\003\005\000\002\003\007\000\002\003" +
    "\007\000\002\003\006\000\002\003\012\000\002\003\012" +
    "\000\002\003\012\000\002\003\012\000\002\003\010\000" +
    "\002\003\014\000\002\003\014\000\002\003\014\000\002" +
    "\003\014\000\002\003\014\000\002\003\012\000\002\003" +
    "\012\000\002\003\012\000\002\003\012\000\002\003\012" +
    "\000\002\003\012\000\002\003\012\000\002\003\012\000" +
    "\002\003\007\000\002\003\007\000\002\003\012\000\002" +
    "\003\012\000\002\003\015\000\002\003\007\000\002\003" +
    "\013\000\002\003\015\000\002\003\011\000\002\005\003" +
    "\000\002\005\003\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\006" +
    "\011\000\002\006\011\000\002\007\015\000\002\007\015" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\012\011\000\002\011\004\000\002\011\012\000\002" +
    "\011\011\000\002\011\005\000\002\013\011\000\002\014" +
    "\005\000\002\014\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\004\032\005\001\002\000\004\002\356\001" +
    "\002\000\004\031\006\001\002\000\004\033\007\001\002" +
    "\000\016\004\022\005\015\012\020\013\023\014\017\034" +
    "\013\001\002\000\020\004\ufff7\005\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\021\ufff7\034\ufff7\001\002\000\020\004\ufff5\005" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\021\ufff5\034\ufff5\001\002" +
    "\000\020\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\021" +
    "\ufffd\034\ufffd\001\002\000\004\002\uffff\001\002\000\020" +
    "\004\ufff9\005\ufff9\012\ufff9\013\ufff9\014\ufff9\021\ufff9\034" +
    "\ufff9\001\002\000\006\027\326\030\327\001\002\000\020" +
    "\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014\ufffb\021\ufffb\034" +
    "\ufffb\001\002\000\004\022\320\001\002\000\004\022\264" +
    "\001\002\000\016\004\022\005\015\012\020\013\023\014" +
    "\017\034\263\001\002\000\006\005\122\007\123\001\002" +
    "\000\004\022\024\001\002\000\014\004\033\005\025\010" +
    "\031\044\032\046\030\001\002\000\012\015\uffd5\026\056" +
    "\027\112\043\113\001\002\000\004\023\101\001\002\000" +
    "\004\015\100\001\002\000\004\027\074\001\002\000\010" +
    "\015\uffd4\023\uffd4\024\uffd4\001\002\000\006\026\065\027" +
    "\064\001\002\000\004\005\034\001\002\000\006\026\036" +
    "\027\035\001\002\000\004\007\040\001\002\000\004\007" +
    "\037\001\002\000\010\015\uffd3\023\uffd3\024\uffd3\001\002" +
    "\000\004\015\041\001\002\000\014\004\044\005\042\010" +
    "\031\044\032\046\030\001\002\000\012\015\uffd5\023\uffd5" +
    "\024\uffd5\026\056\001\002\000\004\015\046\001\002\000" +
    "\004\005\045\001\002\000\004\026\036\001\002\000\006" +
    "\005\047\025\050\001\002\000\006\025\053\027\054\001" +
    "\002\000\004\005\052\001\002\000\004\023\uffc2\001\002" +
    "\000\004\023\uffc5\001\002\000\004\023\uffc6\001\002\000" +
    "\004\007\055\001\002\000\004\023\uffc7\001\002\000\012" +
    "\005\057\006\061\007\062\043\060\001\002\000\010\015" +
    "\uffd0\023\uffd0\024\uffd0\001\002\000\004\007\063\001\002" +
    "\000\010\015\uffcf\023\uffcf\024\uffcf\001\002\000\010\015" +
    "\uffd2\023\uffd2\024\uffd2\001\002\000\010\015\uffd1\023\uffd1" +
    "\024\uffd1\001\002\000\004\007\071\001\002\000\004\007" +
    "\066\001\002\000\004\036\067\001\002\000\004\005\070" +
    "\001\002\000\010\015\uffce\023\uffce\024\uffce\001\002\000" +
    "\004\036\072\001\002\000\004\005\073\001\002\000\010" +
    "\015\uffcd\023\uffcd\024\uffcd\001\002\000\004\007\075\001" +
    "\002\000\004\036\076\001\002\000\004\005\077\001\002" +
    "\000\010\015\uffcc\023\uffcc\024\uffcc\001\002\000\004\023" +
    "\uffc3\001\002\000\004\020\102\001\002\000\014\004\022" +
    "\005\015\012\020\013\023\014\017\001\002\000\016\004" +
    "\022\005\015\012\020\013\023\014\017\021\111\001\002" +
    "\000\020\004\ufff8\005\ufff8\012\ufff8\013\ufff8\014\ufff8\021" +
    "\ufff8\034\ufff8\001\002\000\020\004\ufff6\005\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\021\ufff6\034\ufff6\001\002\000\020\004" +
    "\ufffe\005\ufffe\012\ufffe\013\ufffe\014\ufffe\021\ufffe\034\ufffe" +
    "\001\002\000\020\004\ufffa\005\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\021\ufffa\034\ufffa\001\002\000\020\004\ufffc\005\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\021\ufffc\034\ufffc\001\002\000" +
    "\020\004\uffc4\005\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4" +
    "\034\uffc4\001\002\000\004\007\115\001\002\000\004\007" +
    "\114\001\002\000\004\023\uffc0\001\002\000\004\015\116" +
    "\001\002\000\014\004\044\005\042\010\031\044\032\046" +
    "\030\001\002\000\004\015\120\001\002\000\006\005\047" +
    "\025\050\001\002\000\004\023\uffc1\001\002\000\014\015" +
    "\130\016\133\025\127\027\131\030\132\001\002\000\004" +
    "\030\124\001\002\000\004\007\125\001\002\000\004\015" +
    "\126\001\002\000\020\004\uffdd\005\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\021\uffdd\034\uffdd\001\002\000\004\015\262\001" +
    "\002\000\020\004\ufff4\005\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\021\ufff4\034\ufff4\001\002\000\020\006\147\007\151\035" +
    "\150\037\145\041\146\044\153\045\152\001\002\000\004" +
    "\005\143\001\002\000\004\007\134\001\002\000\004\017" +
    "\135\001\002\000\004\027\136\001\002\000\006\006\137" +
    "\007\140\001\002\000\004\015\142\001\002\000\004\015" +
    "\141\001\002\000\020\004\uffdb\005\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\021\uffdb\034\uffdb\001\002\000\020\004\uffdc\005" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\021\uffdc\034\uffdc\001\002" +
    "\000\004\015\144\001\002\000\020\004\uffde\005\uffde\012" +
    "\uffde\013\uffde\014\uffde\021\uffde\034\uffde\001\002\000\006" +
    "\005\236\006\237\001\002\000\010\005\210\006\212\042" +
    "\211\001\002\000\004\015\207\001\002\000\006\005\173" +
    "\006\174\001\002\000\004\015\172\001\002\000\006\005" +
    "\156\006\157\001\002\000\004\005\154\001\002\000\004" +
    "\015\155\001\002\000\020\004\uffec\005\uffec\012\uffec\013" +
    "\uffec\014\uffec\021\uffec\034\uffec\001\002\000\004\036\165" +
    "\001\002\000\004\036\160\001\002\000\006\005\161\006" +
    "\162\001\002\000\004\015\164\001\002\000\004\015\163" +
    "\001\002\000\020\004\uffe0\005\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\021\uffe0\034\uffe0\001\002\000\020\004\uffe2\005\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\021\uffe2\034\uffe2\001\002\000" +
    "\006\005\166\006\167\001\002\000\004\015\171\001\002" +
    "\000\004\015\170\001\002\000\020\004\uffe1\005\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\021\uffe1\034\uffe1\001\002\000\020" +
    "\004\uffdf\005\uffdf\012\uffdf\013\uffdf\014\uffdf\021\uffdf\034" +
    "\uffdf\001\002\000\020\004\ufff3\005\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\021\ufff3\034\ufff3\001\002\000\004\036\202\001" +
    "\002\000\004\036\175\001\002\000\006\005\176\006\177" +
    "\001\002\000\004\015\201\001\002\000\004\015\200\001" +
    "\002\000\020\004\uffe3\005\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\021\uffe3\034\uffe3\001\002\000\020\004\uffe6\005\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\021\uffe6\034\uffe6\001\002\000\006" +
    "\005\203\006\204\001\002\000\004\015\206\001\002\000" +
    "\004\015\205\001\002\000\020\004\uffe5\005\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\021\uffe5\034\uffe5\001\002\000\020\004" +
    "\uffe4\005\uffe4\012\uffe4\013\uffe4\014\uffe4\021\uffe4\034\uffe4" +
    "\001\002\000\020\004\ufff2\005\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\021\ufff2\034\ufff2\001\002\000\004\036\231\001\002" +
    "\000\004\007\220\001\002\000\004\036\213\001\002\000" +
    "\006\005\214\006\215\001\002\000\004\015\217\001\002" +
    "\000\004\015\216\001\002\000\020\004\uffed\005\uffed\012" +
    "\uffed\013\uffed\014\uffed\021\uffed\034\uffed\001\002\000\020" +
    "\004\uffef\005\uffef\012\uffef\013\uffef\014\uffef\021\uffef\034" +
    "\uffef\001\002\000\004\043\221\001\002\000\006\007\223" +
    "\036\222\001\002\000\004\005\227\001\002\000\004\036" +
    "\224\001\002\000\004\005\225\001\002\000\004\015\226" +
    "\001\002\000\020\004\uffda\005\uffda\012\uffda\013\uffda\014" +
    "\uffda\021\uffda\034\uffda\001\002\000\004\015\230\001\002" +
    "\000\020\004\uffe7\005\uffe7\012\uffe7\013\uffe7\014\uffe7\021" +
    "\uffe7\034\uffe7\001\002\000\006\005\232\006\233\001\002" +
    "\000\004\015\235\001\002\000\004\015\234\001\002\000" +
    "\020\004\uffee\005\uffee\012\uffee\013\uffee\014\uffee\021\uffee" +
    "\034\uffee\001\002\000\020\004\ufff0\005\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\021\ufff0\034\ufff0\001\002\000\004\040\251" +
    "\001\002\000\004\040\240\001\002\000\006\005\241\006" +
    "\242\001\002\000\004\036\246\001\002\000\004\036\243" +
    "\001\002\000\004\005\244\001\002\000\004\015\245\001" +
    "\002\000\020\004\uffeb\005\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\021\uffeb\034\uffeb\001\002\000\004\005\247\001\002\000" +
    "\004\015\250\001\002\000\020\004\uffe9\005\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\021\uffe9\034\uffe9\001\002\000\006\005" +
    "\252\006\253\001\002\000\004\036\257\001\002\000\004" +
    "\036\254\001\002\000\004\005\255\001\002\000\004\015" +
    "\256\001\002\000\020\004\uffe8\005\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\021\uffe8\034\uffe8\001\002\000\004\005\260\001" +
    "\002\000\004\015\261\001\002\000\020\004\uffea\005\uffea" +
    "\012\uffea\013\uffea\014\uffea\021\uffea\034\uffea\001\002\000" +
    "\020\004\ufff1\005\ufff1\012\ufff1\013\ufff1\014\ufff1\021\ufff1" +
    "\034\ufff1\001\002\000\004\002\000\001\002\000\016\004" +
    "\044\005\042\010\031\022\265\044\032\046\030\001\002" +
    "\000\014\004\044\005\042\010\031\044\032\046\030\001" +
    "\002\000\006\023\301\024\300\001\002\000\004\023\270" +
    "\001\002\000\004\020\271\001\002\000\014\004\022\005" +
    "\015\012\020\013\023\014\017\001\002\000\016\004\022" +
    "\005\015\012\020\013\023\014\017\021\273\001\002\000" +
    "\022\004\uffca\005\uffca\011\274\012\uffca\013\uffca\014\uffca" +
    "\021\uffca\034\uffca\001\002\000\004\020\275\001\002\000" +
    "\014\004\022\005\015\012\020\013\023\014\017\001\002" +
    "\000\016\004\022\005\015\012\020\013\023\014\017\021" +
    "\277\001\002\000\020\004\uffc8\005\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\021\uffc8\034\uffc8\001\002\000\014\004\044\005" +
    "\042\010\031\044\032\046\030\001\002\000\004\020\302" +
    "\001\002\000\014\004\022\005\015\012\020\013\023\014" +
    "\017\001\002\000\016\004\022\005\015\012\020\013\023" +
    "\014\017\021\304\001\002\000\022\004\uffcb\005\uffcb\011" +
    "\305\012\uffcb\013\uffcb\014\uffcb\021\uffcb\034\uffcb\001\002" +
    "\000\004\020\306\001\002\000\014\004\022\005\015\012" +
    "\020\013\023\014\017\001\002\000\016\004\022\005\015" +
    "\012\020\013\023\014\017\021\310\001\002\000\020\004" +
    "\uffc9\005\uffc9\012\uffc9\013\uffc9\014\uffc9\021\uffc9\034\uffc9" +
    "\001\002\000\004\023\uffbe\001\002\000\004\023\313\001" +
    "\002\000\004\024\314\001\002\000\004\022\315\001\002" +
    "\000\014\004\044\005\042\010\031\044\032\046\030\001" +
    "\002\000\004\023\317\001\002\000\004\023\uffbd\001\002" +
    "\000\014\004\044\005\042\010\031\044\032\046\030\001" +
    "\002\000\004\023\322\001\002\000\004\020\323\001\002" +
    "\000\014\004\022\005\015\012\020\013\023\014\017\001" +
    "\002\000\016\004\022\005\015\012\020\013\023\014\017" +
    "\021\325\001\002\000\020\004\uffbf\005\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\021\uffbf\034\uffbf\001\002\000\006\037\333" +
    "\041\334\001\002\000\004\027\330\001\002\000\004\007" +
    "\331\001\002\000\004\015\332\001\002\000\020\004\uffd9" +
    "\005\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\034\uffd9\001" +
    "\002\000\004\006\350\001\002\000\004\006\335\001\002" +
    "\000\006\036\337\042\336\001\002\000\004\007\342\001" +
    "\002\000\004\005\340\001\002\000\004\015\341\001\002" +
    "\000\020\004\uffd6\005\uffd6\012\uffd6\013\uffd6\014\uffd6\021" +
    "\uffd6\034\uffd6\001\002\000\004\043\343\001\002\000\004" +
    "\007\344\001\002\000\004\036\345\001\002\000\004\006" +
    "\346\001\002\000\004\015\347\001\002\000\020\004\uffd7" +
    "\005\uffd7\012\uffd7\013\uffd7\014\uffd7\021\uffd7\034\uffd7\001" +
    "\002\000\004\040\351\001\002\000\004\006\352\001\002" +
    "\000\004\036\353\001\002\000\004\005\354\001\002\000" +
    "\004\015\355\001\002\000\020\004\uffd8\005\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\021\uffd8\034\uffd8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\011\004\020" +
    "\006\015\007\013\012\010\013\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\105\006\107" +
    "\007\106\012\104\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\026\011\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\011\004\102\006\015\007\013\012\010\013" +
    "\007\001\001\000\014\003\105\006\107\007\106\012\104" +
    "\013\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\116\001\001\000\002" +
    "\001\001\000\004\010\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\265\014\266\001\001\000\004\005\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\011\004\271\006\015\007\013\012\010" +
    "\013\007\001\001\000\014\003\105\006\107\007\106\012" +
    "\104\013\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\011\004\275\006\015\007\013\012\010\013" +
    "\007\001\001\000\014\003\105\006\107\007\106\012\104" +
    "\013\103\001\001\000\002\001\001\000\004\005\310\001" +
    "\001\000\002\001\001\000\016\003\011\004\302\006\015" +
    "\007\013\012\010\013\007\001\001\000\014\003\105\006" +
    "\107\007\106\012\104\013\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\011\004\306\006\015\007" +
    "\013\012\010\013\007\001\001\000\014\003\105\006\107" +
    "\007\106\012\104\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\011\004\323\006\015\007" +
    "\013\012\010\013\007\001\001\000\014\003\105\006\107" +
    "\007\106\012\104\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCA_LOGICA ::= ABRE_PARENTESES SENTENCA_BOOLEANA FECHA_PARENTESES OP_LOGICO ABRE_PARENTESES SENTENCA_BOOLEANA FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_LOGICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCA_LOGICA ::= SENTENCA_BOOLEANA OP_LOGICO SENTENCA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_LOGICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= ENQUANTO ABRE_PARENTESES SENTENCA_BOOLEANA FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCA_FOR ::= VAR ATE VAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCA_FOR ::= VAR OP_ATRIBUICAO VAL_INTEIRO PONTO_VIRGULA SENTENCA_BOOLEANA PONTO_VIRGULA DECLARACAO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCA_FOR ::= TIPO_VAR VAR OP_ATRIBUICAO VAL_INTEIRO PONTO_VIRGULA SENTENCA_BOOLEANA PONTO_VIRGULA DECLARACAO_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCA_FOR ::= SENTENCA_BOOLEANA PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= PARA ABRE_PARENTESES SENTENCA_FOR FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACAO_FOR ::= OP_INCREMENTO VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACAO_FOR ::= VAR OP_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACAO_FOR ::= VAR OP_ATRIBUICAO VAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO_FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF_ELSE ::= COND_SE ABRE_PARENTESES SENTENCA_LOGICA FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES COND_SENAO ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= COND_SE ABRE_PARENTESES SENTENCA_BOOLEANA FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES COND_SENAO ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= COND_SE ABRE_PARENTESES SENTENCA_LOGICA FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= COND_SE ABRE_PARENTESES SENTENCA_BOOLEANA FECHA_PARENTESES ABRE_CHAVES SENTENCA FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCA_BOOLEANA ::= COMPARAR OP_ATRIBUICAO VAL_INTEIRO EM VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCA_BOOLEANA ::= COMPRIMENTO OP_ATRIBUICAO VAL_INTEIRO EM VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCA_BOOLEANA ::= COMPRIMENTO OP_RELACIONAL VAL_INTEIRO EM VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCA_BOOLEANA ::= VAR OP_RELACIONAL VAL_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCA_BOOLEANA ::= VAR OP_RELACIONAL VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCA_BOOLEANA ::= VAR OP_RELACIONAL ATE VAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCA_BOOLEANA ::= VAR OP_RELACIONAL VAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCA_BOOLEANA ::= TIPO_VAR VAR OP_RELACIONAL VAL_INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCA_BOOLEANA ::= VAL_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCA_BOOLEANA ::= VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACAO ::= VAR OP_ATRIBUICAO EXTRAIR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACAO ::= VAR OP_ATRIBUICAO EXTRAIR VAL_TEXTO DE VAL_INTEIRO ATE VAL_INTEIRO EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACAO ::= VAR OP_ATRIBUICAO SUBSTITUIR VAL_TEXTO POR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACAO ::= VAR OP_ARITIMETICOS OP_ATRIBUICAO VAL_INTEIRO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR DE VAL_INTEIRO ATE VAL_INTEIRO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACAO ::= TIPO_VAR VAR ABRE_COLCHETES VAL_INTEIRO FECHA_COLCHETES OP_ATRIBUICAO VAL_INTEIRO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACAO ::= TIPO_VAR VAR ABRE_COLCHETES VAL_INTEIRO FECHA_COLCHETES OP_ATRIBUICAO VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACAO ::= TIPO_VAR VAL_INTEIRO OP_ARITIMETICOS VAL_INTEIRO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACAO ::= TIPO_VAR VAR OP_ARITIMETICOS VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO CONCATENAR VAR EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO CONCATENAR VAL_TEXTO EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO CONCATENAR VAR EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO CONCATENAR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO BUSCAR VAL_TEXTO EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO BUSCAR VAR EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO BUSCAR VAR EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO BUSCAR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR DE VAL_INTEIRO ATE EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO SUBSTITUIR VAR POR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO SUBSTITUIR VAL_TEXTO POR VAR EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO SUBSTITUIR VAR POR VAR EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO SUBSTITUIR VAL_TEXTO POR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO COMPRIMENTO VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR VAL_TEXTO EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR VAR EM VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR VAL_TEXTO EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO EXTRAIR VAR EM VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACAO ::= TIPO_VAR VAR OP_INCREMENTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO VAL_TEXTO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACAO ::= TIPO_VAR VAR OP_ATRIBUICAO VAL_INTEIRO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACAO ::= TIPO_VAR VAR PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCA ::= SENTENCA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCA ::= SENTENCA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCA ::= SENTENCA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCA ::= SENTENCA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCA ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCA ::= SENTENCA DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIAR ::= COMPILADORES IFSULDEMINAS INICIO FIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= COMPILADORES IFSULDEMINAS INICIO SENTENCA FIM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

