package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linha, Aspas, T_dado, cadeiraString, If, Else, Do, While, For,
    Igual, Soma, Resto, Multiplicacao, Divisao, Op_logico, Op_relacional,
    Op_atribuicao, Op_incremento, Op_booleano, Paren_A, Paren_F,
   Chave_A, Chave_F, Colchete_A, Colchete_F, Begin, Ponto_V, Identificador,
    Numero, ERROR;
non terminal INICIO, SENTENCA, DECLARACAO, DECLARACAO_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCA_BOOLEANA, SENTENCA_FOR;

start with INICIO;

INICIO ::= 
    T_dado Begin Paren_A Paren_F Chave_A SENTENCA Chave_F |
    Begin Paren_A Paren_F Chave_A SENTENCA Chave_F
;
SENTENCA ::= 
    SENTENCA  DECLARACAO |
     DECLARACAO |
    SENTENCA IF | 
    IF |
    SENTENCA IF_ELSE |
    IF_ELSE |
    SENTENCA WHILE |
    WHILE |
    SENTENCA DO_WHILE
    DO_WHILE |
    SENTENCA FOR |
    FOR
;
DECLARACAO ::= 
    T_dado Identificador Ponto_V | 
    T_dado Identificador Op_atribuicao Numero Ponto_V |
    T_dado Identificador Igual Numero Ponto_V |
    T_dado Identificador Op_incremento Ponto_V | 
    T_dado Op_incremento Identificador Ponto_V | 
    cadeiraString Identificador Op_atribuicao Aspas Aspas Ponto_V |
    cadeiraString Identificador Igual Aspas Aspas Ponto_V |
    cadeiraString Identificador Op_atribuicao Aspas Identificador Aspas Ponto_V |
    cadeiraString Identificador Igual Aspas Identificador Aspas Ponto_V
;
IF ::= If Paren_A SENTENCA_BOOLEANA Paren_F Chave_A SENTENCA Chave_F
;
SENTENCA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional  Aspas  Aspas |
    Identificador Op_relacional  Aspas Identificador  Aspas
;
IF_ELSE ::= If Paren_A SENTENCA_BOOLEANA Paren_F Chave_A SENTENCA Chave_F Else Chave_A SENTENCA Chave_F
;
WHILE ::= While Paren_A SENTENCA_BOOLEANA Paren_F Chave_A SENTENCA Chave_F
;
DO_WHILE ::= Do Chave_A SENTENCA Chave_F While Paren_A SENTENCA_BOOLEANA Paren_F Ponto_V
;
FOR ::= For Paren_A SENTENCA_FOR Paren_F Chave_A SENTENCA Chave_F
;
SENTENCA_FOR ::=
    T_dado Identificador Igual Numero Ponto_V SENTENCA_BOOLEANA Ponto_V DECLARACAO_FOR |
    Identificador Igual Numero Ponto_V SENTENCA_BOOLEANA Ponto_V DECLARACAO_FOR
;
DECLARACAO_FOR ::= 
    Identificador Op_atribuicao Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;